#!/bin/sh
# Superuser library, 17.01.2020
# PID control 27.05.2020
# Use built-in functions 07.01.2021
# Command stack: sudo
# Deprecated stack: whoami, cat, awk

# required in /etc/sudoers: ALL=NOPASSWD: WEBADMIN_SUPERUSER_CMD_LABEL
# Shebang: #![path_to_server-admin-page]/lib/shell/superuser.sh [path-to-interpreter]
# for console/update-shebang.php in second line: #?php has_superuser_shebang
# Input args: [path_to_interpreter] [path_to_script]

# Disable superuser below
# exec $@

# Settings
#WEBADMIN__PID='/tmp/.rclocal_daemons_logs/.webadmin.pid' # Path to webadmin.pid (generated from /usr/local/sbin/webadmin.sh) [not used anymore]
WEBADMIN__PID='/var/run/webadmin/webadmin.pid' # webadmin.pid is now generated by /etc/init.d/webadmin
SUDO__PATH='/usr/bin/sudo' # Path to sudo
#WHOAMI__PATH='/usr/bin/whoami' # Path to whoami, deprecated

# Check if I am root
#if [ ! "$(${WHOAMI__PATH})" = 'root' ]; then # deprecated
if [ ! "${USER}" = 'root' ]; then # sudo sets USER=root on eval, whoami is not needed
	# Define function to replace awk
	print_S4() { echo -n "${4}"; }
	# Define function to replace cat
	read_file() { while IFS= read -r line || [ -n "${line}" ]; do echo -n "${line}"; done < "${1}"; }

	# Check if second-level parent PID is a php server PID
	#[ "$(cat /proc/$(cat /proc/$$/stat | awk '{print $4}')/stat | awk '{print $4}')" = "$(cat "${WEBADMIN__PID}")" ] || exit 0 # deprecated
	[ "$(print_S4 $(read_file "/proc/$(print_S4 $(read_file "/proc/$$/stat"))/stat"))" = "$(read_file "${WEBADMIN__PID}")" ] || exit 0

	# Parent's PID is ok, elevate this script
	exec ${SUDO__PATH} ${0} ${@}
else
	# Now script is elevated, only exec script
	exec ${@}
fi
